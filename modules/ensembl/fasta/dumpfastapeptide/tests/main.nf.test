// See the NOTICE file distributed with this work for additional information
// regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// nf-core modules test fasta/dumpfastapep
nextflow_process {

    name "Test Process FASTA_DUMPFASTAPEPTIDE"
    script "../main.nf"
    process "FASTA_DUMPFASTAPEPTIDE"

    tag "modules"
    tag "modules_local"
    tag "fasta"
    tag "fasta/dumpfastapeptide"

    test("Fasta Dump Peptide [stub]") {
        when {

                options "-stub"

                process {
                    """
                    input[0] = [[ test_id:'dummy_core_db_core_110_1', species:'Genus species']]
                    """
                }
            }

            then {

                assert snapshot(
                    process.out.peptide_fasta.collect {
                        it.collect { it instanceof String && file(it).exists() ? file(it).name : it }
                        }
                    ).match("peptide_fasta")

                def testData = process.out.peptide_fasta.collect { core_db, pipeline_tag, fastaPath -> [[ core_db, pipeline_tag, path(fastaPath).fasta]] }
                assert testData.contains([
                    [
                        [['test_id':'dummy_core_db_core_110_1', 'species':'Genus species']], 
                            'fasta_pep', [
                                'PEP2':'MKFLVNVALVFMVVYISYIYAAPEPEPAPEPEAEADAEADPEAGIGAVLK',
                                'PEP1':'APLCOACOIJSOOFAAPOAPKAEWCWCMWCMPWOPSKQPSKQPKSPQKSQ',
                                'PEP3':'AMCAMPACPAPCMPAMPADAPCMPAMCPMAPCPMAPPAMCPMAPMCPAMP'
                            ]
                        ]
                    ]
                )

                assertAll(
                    { assert process.success },
                    { assert snapshot(process.out).match() },
                    { assert process.out.peptide_fasta.size() == 1 },
                    { assert process.out.peptide_fasta != null },
                )
            }
    }
}