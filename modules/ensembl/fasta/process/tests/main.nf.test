// See the NOTICE file distributed with this work for additional information
// regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// nf-core modules test fasta/process
nextflow_process {

    name "Test Process FASTA_PROCESS"
    script "../main.nf"
    process "FASTA_PROCESS"

    tag "modules"
    tag "modules_ensembl"
    tag "fasta"
    tag "fasta/process"

    test("Fasta Process - fna") {

        when {
            process {
                """                
                input[0] = [
                    [ id:'GCF_000002765.3'], // meta map
                    file( '${projectDir}' + '/tests/modules/ensembl/fasta/process/input.fna.gz', checkIfExists: true),
                    file( '${projectDir}' + '/tests/modules/ensembl/fasta/process/input.gbff.gz', checkIfExists: true),
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("Fasta Process - faa") {

        when {
            process {
                """
                input[0] = [
                    [ id:'GCF_000002765.3'], // meta map
                    file( '${projectDir}' + '/tests/modules/ensembl/fasta/process/input.faa.gz', checkIfExists: true),
                    file( '${projectDir}' + '/tests/modules/ensembl/fasta/process/input.gbff.gz', checkIfExists: true),
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
