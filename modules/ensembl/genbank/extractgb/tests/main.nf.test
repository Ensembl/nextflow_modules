// See the NOTICE file distributed with this work for additional information
// regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// nf-core modules test genbank/extractgb
nextflow_process {

    name "Test Process GENBANK_EXTRACTGB"
    script "../main.nf"
    process "GENBANK_EXTRACTGB"

    tag "modules"
    tag "modules_nfcore"
    tag "genbank"
    tag "genbank/extractgb"

test("Genbank extract gb [stub]") {
        when {

            options "-stub"

            process {
                """
                input[0] = [[ accession:'test_genbank'] , file("test_output.gb")]
                """
            }
        }

        then {
            // assert snapshot(
            //         process.out.genome.collect {
            //             it.collect { it instanceof String && file(it).exists() ? file(it).name : it }
            //             }
            //         ).match("genomejson_file")
            // assert snapshot(
            //         process.out.seq_regions.collect {
            //             it.collect { it instanceof String && file(it).exists() ? file(it).name : it }
            //             }
            //         ).match("seq_region_file")
            // assert snapshot(
            //         process.out.dna_fasta.collect {
            //             it.collect { it instanceof String && file(it).exists() ? file(it).name : it }
            //             }
            //         ).match("dna_fasta")
            // assert snapshot(
            //         process.out.gene_gff.collect {
            //             it.collect { it instanceof String && file(it).exists() ? file(it).name : it }
            //             }
            //         ).match("gff_file")
            // assert snapshot(
            //         process.out.pep_fasta.collect {
            //             it.collect { it instanceof String && file(it).exists() ? file(it).name : it }
            //             }
            //         ).match("peptide_fasta")
            
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() },
                { assert process.out.size() >= 3  },
                { assert process.out.genome.size() == 1 },
                { assert process.out.seq_regions.size() == 1 },
                { assert process.out.dna_fasta.size() == 1 },
                { assert process.out.gene_gff.size() <= 1 },
                { assert process.out.pep_fasta.size() <= 1 },
                { assert process.out != null }
            )
        }
    }
}