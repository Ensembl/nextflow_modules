nextflow_process {

    name "Test Process MANIFEST_MAKER"
    script "modules/ensembl/manifest/integrity/main.nf"

    process "MANIFEST_MAKER"

    tag "modules"
    tag "modules_nfcore"
    tag "manifest"
    tag "manifest/maker"

        when {
            options "-stub"

            process {
                """
                input[0] = Channel.of(
                        '##gff-version 3',
                        'chr1\tID=gene1'
                    )
                    .collectFile(name: 'genes.gff3', newLine: true)
                    .map { file -> [ [ id:'test' ], file ] }
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
                //TODO nf-core: Add all required assertions to verify the test output.
                // See https://nf-co.re/docs/contributing/tutorials/nf-test_assertions for more information and examples.
            )
        }

    }

    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used but keep the " - stub" suffix.
    test("sarscov2 - bam - stub") {

        options "-stub"

        when {
            process {
                """
                // TODO nf-core: define inputs of the process here. Example:
                
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true),
                ]
                """
            }
        }

        then {
            assert process.success
            assert snapshot(process.out).match()
        }

    }
}
